version: 2.1

orbs:
  sonarcloud: sonarsource/sonarcloud@3.0.0

# Comandos reutilizables para DRY principle
commands:
  setup_php_environment:
    description: "Configura el entorno PHP con PCOV"
    steps:
      - run:
          name: Instalar PCOV para cobertura
          command: |
            sudo pecl install pcov
            sudo docker-php-ext-enable pcov
            echo "pcov.enabled=1" | sudo tee -a /usr/local/etc/php/conf.d/docker-php-ext-pcov.ini
            php -m | grep pcov

  install_dependencies:
    description: "Instala dependencias con cache optimizado"
    steps:
      - restore_cache:
          keys:
            - composer-v2-{{ checksum "composer.lock" }}
            - composer-v2-
      - run:
          name: Instalar dependencias de Composer
          command: |
            composer install --no-interaction --prefer-dist --optimize-autoloader
      - save_cache:
          key: composer-v2-{{ checksum "composer.lock" }}
          paths:
            - vendor

jobs:
  # Job separado para tests - principio de responsabilidad única
  test:
    docker:
      - image: cimg/php:8.2-browsers
    resource_class: small
    steps:
      - checkout
      - setup_php_environment
      - install_dependencies
      
      - run:
          name: Crear directorios necesarios
          command: mkdir -p test-results
      
      - run:
          name: Ejecutar tests unitarios
          command: |
            vendor/bin/phpunit \
              --coverage-clover=coverage.xml \
              --coverage-html=coverage \
              --log-junit=test-results/phpunit.xml \
              --coverage-text
      
      # Guardar resultados para jobs posteriores
      - persist_to_workspace:
          root: .
          paths:
            - coverage.xml
            - coverage
            - test-results
      
      - store_test_results:
          path: test-results
      
      - store_artifacts:
          path: coverage
          destination: coverage-report
      
      # Fail fast si los tests fallan
      - run:
          name: Verificar que todos los tests pasaron
          command: |
            if [ ! -f test-results/phpunit.xml ]; then
              echo "Tests fallaron - deteniendo pipeline"
              exit 1
            fi

  # Job separado para análisis de código
  code_quality:
    docker:
      - image: cimg/php:8.2-browsers
    resource_class: small
    steps:
      - checkout
      - install_dependencies
      
      # Recuperar artifacts del job anterior
      - attach_workspace:
          at: .
      
      - run:
          name: Análisis estático con PHPStan
          command: |
            vendor/bin/phpstan analyse src/ \
              --error-format=checkstyle \
              --no-progress \
              > phpstan-report.xml || true
      
      - run:
          name: Análisis de code mess con PHPMD
          command: |
            vendor/bin/phpmd src/ xml \
              cleancode,codesize,controversial,design,naming,unusedcode \
              > phpmd-report.xml || true
      
      # Análisis con SonarCloud
      - sonarcloud/scan:
          cache_version: 2
      
      # Solo guardar artifacts si hay errores (debugging)
      - store_artifacts:
          path: phpstan-report.xml
          destination: quality-reports/phpstan.xml
      - store_artifacts:
          path: phpmd-report.xml  
          destination: quality-reports/phpmd.xml

  # Job para validar que el proyecto se puede buildear
  build_validation:
    docker:
      - image: cimg/php:8.2-browsers
    resource_class: small
    steps:
      - checkout
      - install_dependencies
      
      - run:
          name: Validar sintaxis PHP
          command: find src/ -name "*.php" -exec php -l {} \;
      
      - run:
          name: Validar composer.json
          command: composer validate --strict
      
      - run:
          name: Verificar autoloader
          command: composer dump-autoload --optimize --strict-psr

workflows:
  # Workflow para desarrollo (develop y feature branches)
  development_pipeline:
    when:
      or:
        - equal: [ develop, << pipeline.git.branch >> ]
        - matches: {pattern: "^feature/.*", value: << pipeline.git.branch >> }
    jobs:
      - build_validation
      - test
      - code_quality:
          requires:
            - test
  
  # Workflow para main branch - más estricto
  main_branch:
    when:
      equal: [ main, << pipeline.git.branch >> ]
    jobs:
      - build_validation
      - test
      - code_quality:
          requires:
            - test
          context: sonarcloud-context  # Variables seguras para main

  # Workflow para release
  release_pipeline:
    when:
      matches: {pattern: "^release/.*", value: << pipeline.git.branch >> }
    jobs:
      - build_validation
      - test
      - code_quality:
          requires:
            - test

  # Workflow para hotfixes
  hotfix_pipeline:
    when:
      matches: {pattern: "^hotfix/.*", value: << pipeline.git.branch >> }
    jobs:
      - build_validation
      - test
      - code_quality:
          requires:
            - test