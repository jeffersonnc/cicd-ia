version: 2.1

orbs:
  sonarcloud: sonarsource/sonarcloud@3.0.0

# Comandos reutilizables para DRY principle
commands:
  install_dependencies:
    description: "Instala dependencias con cache optimizado"
    steps:
      - restore_cache:
          keys:
            - composer-v2-{{ checksum "composer.lock" }}
            - composer-v2-
      - run:
          name: Instalar dependencias de Composer
          command: |
            composer install --no-interaction --prefer-dist --optimize-autoloader
      - save_cache:
          key: composer-v2-{{ checksum "composer.lock" }}
          paths:
            - vendor

jobs:
  # Job separado para tests - principio de responsabilidad única
  test:
    docker:
      - image: cimg/php:8.2-browsers
    resource_class: small
    steps:
      - checkout
      - install_dependencies
      
      - run:
          name: Crear directorios necesarios
          command: mkdir -p test-results
      
      # Guardar resultados para jobs posteriores
      - persist_to_workspace:
          root: .
          paths:
            - coverage.xml
            - coverage
            - test-results
      
      - store_test_results:
          path: test-results
      
      - store_artifacts:
          path: coverage
          destination: coverage-report
      
      # Fail fast si los tests fallan
      - run:
          name: Verificar que todos los tests pasaron
          command: |
            if [ ! -f test-results/phpunit.xml ]; then
              echo "Tests fallaron - deteniendo pipeline"
              exit 1
            fi

  # Job separado para análisis de código
  code_quality:
    docker:
      - image: cimg/php:8.2-browsers
    resource_class: small
    steps:
      - checkout
      - install_dependencies
      
      # Recuperar artifacts del job anterior
      - attach_workspace:
          at: .
      
      - run:
          name: Análisis estático con PHPStan
          command: |
            vendor/bin/phpstan analyse src/ \
              --error-format=checkstyle \
              --no-progress \
              > phpstan-report.xml || true
      
      - run:
          name: Análisis de code mess con PHPMD
          command: |
            vendor/bin/phpmd src/ xml \
              cleancode,codesize,controversial,design,naming,unusedcode \
              > phpmd-report.xml || true
      
      # Análisis con SonarCloud
      - sonarcloud/scan:
          cache_version: 2
      
      # Solo guardar artifacts si hay errores (debugging)
      - store_artifacts:
          path: phpstan-report.xml
          destination: quality-reports/phpstan.xml
      - store_artifacts:
          path: phpmd-report.xml  
          destination: quality-reports/phpmd.xml

  # Job para validar que el proyecto se puede buildear
  build_validation:
    docker:
      - image: cimg/php:8.2-browsers
    resource_class: small
    steps:
      - checkout
      - install_dependencies
      
      - run:
          name: Validar sintaxis PHP
          command: find src/ -name "*.php" -exec php -l {} \;
      
      - run:
          name: Validar composer.json
          command: composer validate --strict
      
      - run:
          name: Verificar autoloader
          command: composer dump-autoload --optimize --strict-psr

  docker_build_and_push:
    docker:
      - image: cimg/base:stable
    resource_class: medium
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      
      - run:
          name: Build Docker image
          command: |
            docker build -t jeffnacato/cicd-ia:$CIRCLE_SHA1 .
            docker tag jeffnacato/cicd-ia:$CIRCLE_SHA1 jeffnacato/cicd-ia:latest
      
      - run:
          name: Push to Docker Hub
          command: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push jeffnacato/cicd-ia:$CIRCLE_SHA1
            docker push jeffnacato/cicd-ia:latest

workflows:
  development_pipeline:
    jobs:
      - build_validation:
          filters:
            branches:
              only:
                - develop
                - /feature\/.*/
      - test:
          filters:
            branches:
              only:
                - develop
                - /feature\/.*/
      - code_quality:
          requires:
            - test
          filters:
            branches:
              only:
                - develop
                - /feature\/.*/
  
  main_branch:
    jobs:
      - build_validation:
          filters:
            branches:
              only:
                - main
      - test:
          filters:
            branches:
              only:
                - main
      - code_quality:
          requires:
            - test
          filters:
            branches:
              only:
                - main
      - docker_build_and_push:
          requires:
            - test
            - code_quality
          filters:
            branches:
              only:
                - main

  release_pipeline:
    jobs:
      - build_validation:
          filters:
            branches:
              only:
                - /release\/.*/
      - test:
          filters:
            branches:
              only:
                - /release\/.*/
      - code_quality:
          requires:
            - test
          filters:
            branches:
              only:
                - /release\/.*/
  
  hotfix_pipeline:
    jobs:
      - build_validation:
          filters:
            branches:
              only:
                - /hotfix\/.*/
      - test:
          filters:
            branches:
              only:
                - /hotfix\/.*/
      - code_quality:
          requires:
            - test
          filters:
            branches:
              only:
                - /hotfix\/.*/